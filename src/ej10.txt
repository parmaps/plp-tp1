P(x) :  ∀ n , m :: Int. indentar n (indentar m x) = indentar (n+m) x

--

Siendo precisos, 
∀ n , m :: Int. 
n > 0 && m > 0 => indentar n (indentar m x) = indentar (n+m) x
Por lema de generación de bool (n > 0 && m > 0) es igual a True o False.


Caso False:
False => indentar n (indentar m x) = indentar (n+m) x

por regla del implica, esto da siempre True.

Caso True:
Por regla de Bool, al tener &&, puedo escribirlo de esta forma:

True && True => indentar n (indentar m x) = indentar (n+m) x

y por Bool, basta probar que vale:

indentar n (indentar m x) = indentar (n+m) x


-- 

Proponemos hacer inducción estructural en x.


CASO BASE: 
P(Vacio):
indentar n (indentar m Vacío) = indentar (n + m) Vacío  
indentar m Vacío = Vacío                                                    {lema 1}  
Vacío = Vacío                                                               {lema 1}


PASO INDUCTIVO:

∀ i :: Int, s :: String, d :: Doc

Caso Texto:

Tenemos que x = Texto s d
QVQ indentar n (indentar m (Texto s d)) => indentar (n + m) Texto s d
{HI} indentar n (indentar m d) = indentar (n + m) d


indentar n (indentar m (Texto s d))  
= indentar n (Texto s (indentar m d))                                       {lema 2}
= Texto s (indentar n (indentar m d))                                       {lema 2}
= Texto s (indentar (n + m) d)                                              {HI} 
= indentar (m + m) (Texto s d)                                              {lema 2}
| Como queria probar

Caso Linea:
Tenemos que x = Linea i d
QVQ indentar n (indentar m Linea i d) => indentar (n + m) Linea i d
{HI} indentar n (indentar m d) = indentar (n+m) d

indentar n (indentar m Linea i d)                                           
= indentar n (Linea(m+i) (indentar m d))                                    {lema 3}
= Linea (n+(m+i)) indentar n (indentar m d)                                 {lema 3}
= Linea (n+(m+i)) indentar (n + m) d                                        {HI}
= Linea ((n+m)+i) indentar (n + m) d                                        {int}
= indentar n+m (Linea i d)                                                  {lema 3}
| Como queria probar


Luego por el caso base Verdadero y el Paso Inductivo también Verdadero vale P(x)

Lemas y Definiciones necesarias:

{def indentar} = foldDoc Vacio Texto (\i' d -> Linea (i+i') d)

{def foldDoc} = case documento of
                    Vacio -> fVacio
                    Texto s d -> fTexto s (rec d)
                    Linea i d -> fLinea i (rec d)
                    where rec = foldDoc fVacio fTexto fLinea

LEMA 1:

indentar k vacío = vacío  ∀ k :: Int positivos
= foldDoc Vacio Texto (\i' d -> Linea (k+i') d) Vacio                       {def indentar}
= (case Vacio of                                                 
                    Vacio -> Vacio
                    Texto s d -> Texto s (rec d)
                    Linea k d -> (\i' d' → Linea (k + i') d') d) k (rec d) 
                    where rec = foldDoc Vacio Texto ((\i' d' → Linea (k + i') d') d)                
                                                                            {def foldDoc} 
= Vacio                                                                     {case}     
| Como queria probar
                                                        
LEMA 2:

indentar k (Texto s d) = Texto s (indentar k d)  ∀ k :: Int positivos, s :: String, d :: Doc
indentar k (Texto s d)
= foldDoc Vacio Texto (\i' d' -> Linea (k+i') d') Texto s d                 {def indentar}
= (case Texto s d of                                                 
                    Vacio -> Vacio
                    Texto s d -> Texto s (rec d)
                    Linea k d -> (\i' d' → Linea (k + i') d') d) k (rec d) 
                    where rec = foldDoc Vacio Texto ((\i' d' → Linea (k + i') d') d)                
                                                                            {def foldDoc} 

= Texto s (foldDoc vacío Texto (\i' d' → Linea (k + i') d') d)              {case}
= Texto s (indentar k d)                                                    {def indentar}
| Como queria probar

LEMA 3:

indentar m (Linea k d) = Linea (k + m) (indentar m d) ∀ m, k :: Int positivos, d :: Doc
= indentar m (Linea k d)
= foldDoc Vacio Texto (\i' d' -> Linea (k+i') d') Linea k d                 {def indentar}

= (case Linea k d of                                                 
                    Vacio -> Vacio
                    Texto s d -> Texto s (rec d)
                    Linea k d -> (\i' d' → Linea (k + i') d') d) k (rec d) 
                    where rec = foldDoc Vacio Texto ((\i' d' → Linea (k + i') d') d)                
                                                                            {def foldDoc} 

= Linea (k + m) (foldDoc Vacio Texto ((\i' d' → Linea (k + i') d') d) )    {case}           
= Linea (k + m) (indentar m d)                                              {def indentar}   
| Como queria probar
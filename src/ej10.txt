indentar :: Int -> Doc -> Doc  
indentar = l foldDoc Vector Texto (\l d -> lineas (l + d) d)

foldDoc :: b -> (String -> b -> b) -> (Int -> b -> b) -> Doc -> b  
foldDoc vacío fTexto fLinea documento = rec documento  
  where rec = 
    vacío         si documento = vacío  
    Texto s d     fTexto s (rec d)  
    Linea l d     fLinea l (rec d)  


data Doc = Vacío  
         | Texto String Doc  
         | Linea Int Doc


CASO BASE: 
x = Vacío

indentar m (indentar l vacío) = indentar (m + l) vacío  
indentar m vacío = vacío                                                    {lema 1}  
vacío = vacío                                                               {lema 1}


PASO INDUCTIVO:
Tenemos 2 casos recurisvos Texto y Linea

Caso Texto:

indentar m (indentar l (Texto s d))  
= indentar m (Texto s (indentar l d))                                       {lema 2}
= Texto s (indentar m (indentar l d))                                       {lema 2}
= Texto s (indentar (m + l) d)                                              {HI} 
= indentar (m + l) (Texto s d)
| Como queria probar

indentar m (linea k d) = Linea (m+k) (indentar m d) ∀ m, k :: Int positivos, d :: Doc

Caso Linea:
Tenemos que x = Linea i d
QVQ indentar n (indentar m Linea i d) => indentar (n + m) Linea i d
{HI} indentar n (indentar m d) 

indentar n (indentar m Linea i d) {lema 3}
= identar n (Linea(m+i) (indentar m d)) {lema 3}
= Linea (n+(m+i)) indentar n (indentar m d) {HI}
= Linea (n+(m+i)) indentar (n + m) d
= Linea ((n+m)+i) indentar ((n+m)) d  {lema 3}
= indentar n+m (linea i d) {lema 3}

Lemas:

Definiciones necesarias:

{def indentar} = foldDoc Vacio Texto (\i' d -> Linea (i+i') d)

{def foldDoc} = case documento of
                    Vacio -> fVacio
                    Texto s d -> fTexto s (rec d)
                    Linea i d -> fLinea i (rec d)
                    where rec = foldDoc fVacio fTexto fLinea

LEMA 1:

indentar k vacío = vacío  ∀ k :: Int positivos
= foldDoc Vacio Texto (\i' d -> Linea (k+i') d) vacio                       {def indentar}
= (case documento of                                                 
                    Vacio -> fVacio
                    Texto s d -> fTexto s (rec d)
                    Linea k d -> fLinea k (rec d)
                    where rec = foldDoc fVacio fTexto fLinea) vacio         {def foldDoc} 
= case Vacio of Vacio -> fVacio                                             {β}        
= vacío                                                                     {case}     
| Como queria probar
                                                        
LEMA 2:

indentar k (texto s d) = texto s (indentar k d)  ∀ k :: Int positivos, s :: String, d :: Doc
indentar k (texto s d)
= foldDoc Vacio Texto (\i' d' -> Linea (k+i') d') texto s d                   {def indentar}
= (case documento of                                                 
                    Vacio -> Vacio
                    Texto s d -> Texto s (rec d)
                    Linea k d -> (\i' d' → linea (k + i') d') d) k (rec d) 
                    where rec = foldDoc Vacio Texto ((\i' d' → linea (k + i') d') d) Texto s d     {def foldDoc} 
= (case Texto s d of                                                 
                    Vacio -> Vacio
                    Texto s d -> Texto s (rec d)
                    Linea k d -> (\i' d' → linea (k + i') d') d) k (rec d) 
                    where rec = foldDoc Vacio Texto ((\i' d' → linea (k + i') d') d)     {def B} 

= texto s (foldDoc vacío texto (\i' d' → linea (k + i') d') d)              {case}
= texto s (indentar k d)                                                    {def indentar}
| Como queria probar

LEMA 3:

indentar m (linea k d) = Linea (k + m) (indentar m d) ∀ m, k :: Int positivos, d :: Doc
= indentar m (linea k d)
= foldDoc Vacio Texto (\i' d' -> Linea (k+i') d') linea k d                   {def indentar}
= (case documento of                                                 
                    Vacio -> fVacio
                    Texto s d -> fTexto s (rec d)
                    Linea k d -> fLinea k (rec d)
                    where rec = foldDoc fVacio fTexto fLinea)  linea i d    {def foldDoc} 

= case linea k d of Linea k d -> linea (k + m)                              {β}           
= linea (k + m) (foldDoc fVacio fTexto fLinea  d')                          {case}        
= linea (k + m) (indentar m d)                                              {def indentar}   
| Como queria probar